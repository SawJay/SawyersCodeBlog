@page "/author/blogposts"
@using Microsoft.AspNetCore.Authorization
@using SawyersCodeBlog.Client.Components.UI
@using SawyersCodeBlog.Client.Components.UI.BlogPosts
@using SawyersCodeBlog.Client.Components.UI.Categories
@using SawyersCodeBlog.Client.Services.Interfaces
@using SawyersCodeBlog.Client.Models
@using SawyersCodeBlog.Client.Helpers
@using SawyersCodeBlog.Helpers
@using SawyersCodeBlog.Client.Components.Pages
@inject IBlogPostDTOService BlogPostService
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Author")]

<PageTitle>Blog Posts</PageTitle>

<div class="row p-3">
    <div class="col-12 col-md-6">
        <h3>Blog Posts</h3>
    </div>
    <div class="col-12 col-md-6 text-end">
        <a href="author/create" class="btn btn-primary text-end">
            Add a new blog post
        </a>
    </div>
</div>

<div class="container">

    @foreach (BlogPostDTO blogPost in posts)
    {
        <BlogPostEditCard Post="blogPost" OnDelete="DeleteBlogPost" />
    }

</div>

@code {
    #region component parameters
    [SupplyParameterFromQuery] // ?categoryId=5
    public int? BlogPostId { get; set; }
    #endregion


    #region component state
    private BlogPostDTO blogPost = new BlogPostDTO();
    private IEnumerable<BlogPostDTO> posts = [];
    private string? imageError;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        posts = await BlogPostService.GetBlogPostsAsync();
    }

    private async Task DeleteBlogPost(int blogPostId)
    {
        try
        {
            // delete the category
            await BlogPostService.DeleteBlogPostAsync(blogPostId);

            // update
            posts = await BlogPostService.GetBlogPostsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

    }


}
