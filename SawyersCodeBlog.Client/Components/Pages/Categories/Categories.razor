@page "/author/categories"
@using Microsoft.AspNetCore.Authorization
@using SawyersCodeBlog.Client.Components.UI.Categories
@using SawyersCodeBlog.Client.Services.Interfaces
@using SawyersCodeBlog.Client.Models
@using SawyersCodeBlog.Client.Helpers
@using SawyersCodeBlog.Helpers
@using SawyersCodeBlog.Client.Components.Pages
@inject ICategoryDTOService CategoryService
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Author")]

<PageTitle>Categories</PageTitle>

<div class="row p-3">
    <div class="col-12 col-md-6">
        <h3>Categories</h3>
    </div>
    <div class="col-12 col-md-6 text-end">
        <a href="addcategory" class="btn btn-primary text-end">
            Add a new category
        </a>
    </div>
</div>

<div class="container">

    @foreach (CategoryDTO category in categories)
    {
        <CategoryCard Category="category" OnDelete="DeleteCategory"/>
    }

</div>

@code {
    #region component parameters
    [SupplyParameterFromQuery] // ?categoryId=5
    public int? CategoryId { get; set; }
    #endregion


    #region component state
    private CategoryDTO formCategory = new CategoryDTO();
    private IEnumerable<CategoryDTO> categories = [];
    private string? imageError;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetCategoriesAsync();
    }

    private async Task DeleteCategory(int categoryId)
    {
        try
        {
            // delete the category
            await CategoryService.DeleteCategoryAsync(categoryId);

            // update
            categories = await CategoryService.GetCategoriesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

    }
    
    
}
