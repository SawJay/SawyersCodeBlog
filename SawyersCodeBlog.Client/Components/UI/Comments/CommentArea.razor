@using SawyersCodeBlog.Client.Helpers
@using SawyersCodeBlog.Client.Models
@using SawyersCodeBlog.Client.Services.Interfaces
@inject ICommentDTOService CommentService

<div class="pt-4 pt-xl-5 mt-4" id="comments">
    <h2 class="h1 py-lg-1 py-xl-3">@comments.Count() Comments</h2>
    @foreach (CommentDTO comment in comments)
    {
        <CommentItem BlogPostId="BlogPostId" Comment="comment" OnDelete="DeleteComment" OnUpdate="UpdateComment" />
    }

    <div class="card border-0 bg-secondary pt-2 p-md-2 p-xl-3 p-xxl-4 mt-n3 mt-md-0">
        <CommentForm BlogPostId="BlogPostId" OnSubmit="HandleSubmit" />
    </div>
</div>


@code {
    [Parameter, EditorRequired]
    public int BlogPostId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private IEnumerable<CommentDTO> comments = [];
    private CommentDTO? comment;
    private UserInfo? userInfo;

    private enum Status
    {
        Viewing,
        Editing,
    }

    private Status status = Status.Viewing;


    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        comments = await CommentService.GetCommentsAsync(BlogPostId);
    }

    private async Task HandleSubmit(CommentDTO comment)
    {
        try
        {
            await CommentService.CreateCommentAsync(comment);

            comments = await CommentService.GetCommentsAsync(BlogPostId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }


    private async Task DeleteComment(int commentId)
    {
        try
        {
            // delete the comment
            await CommentService.DeleteCommentAsync(commentId);

            // update
            comments = await CommentService.GetCommentsAsync(BlogPostId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task UpdateComment(CommentDTO updatedComment)
    {
        await CommentService.UpdateCommentAsync(updatedComment);
        comments = await CommentService.GetCommentsAsync(BlogPostId);
        status = Status.Viewing;
    }
}
